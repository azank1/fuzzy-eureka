Within the Context of a PoL based ecosystems; ZK-Proofs are used to train the model in a
decentralized manner.

BASIC IMPLEMENTATION TO VERIFY CUSTOM INPUTS { weights_before, weights_after, delta }

1.	Build ZK circuit to compute training weights. PoT.circom.
2.	Compile the ZK circuit: “circom PoT.circom --r1cs --wasm --sym –c”
3.	PoT.r1cs, PoT.wasm and PoT.sym generated.
4.	Create input file modelling weights before and after training
5.	Generate private witness: “node PoT_js/generate_witness.js PoT.wasm input.json witness.wtns”
6.	Generate zk proof using snarkJS (install snarkjs : npm install -g snarkjs)
7.	Give script access. Revoke after testing using: ‘Set-ExecutionPolicy Restricted -Scope CurrentUser’
8.	Make sure to have. SnarkJs, PoT.circom, input.json and witness.wtns ready.

9.	ZK PROOF GENERATION:

PHASE1
  1.	Setup Trusted Ceremony (phase1): trusted setup for the proving schema.
      a.“snarkjs powersoftau new bn128 12 pot12_0000.ptau -v”

  2.	Contribute randomness adding entropy
      a.“snarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name="First Contribution" -v”

  3.	Prepare for phase 2 – groth16
      a.“snarkjs powersoftau prepare phase2 pot12_0001.ptau pot12_final.ptau”
  
PHASE2
  1.	Generate ZK proving and verification Keys
      a.snarkjs groth16 setup PoT.r1cs pot12_final.ptau PoT_final.zkey

  2.	contribute to the final ZK setup
      a.snarkjs zkey contribute PoT_final.zkey PoT_final_contributed.zkey --name="Second Contribution" -v

  3.	export verification key
      a.snarkjs zkey export verificationkey PoT_final_contributed.zkey verification_key.json

PHASE3
  1.  Generate ZK proof	
      a.snarkjs groth16 prove PoT_final_contributed.zkey witness.wtns proof.json public.json
      Generates: proof.json and public.json
      Zk proof is within proof.json. public inputs for verification are in public.json.

  2.	Verify Proof
      a.snarkjs groth16 verify verification_key.json public.json proof.jso
      IF PROOF IS VALID OUTPUT: ‘snarkJS: OK!’

  3.	Generate Solidity Verifier
      a.snarkjs zkey export solidityverifier PoT_final_contributed.zkey verifier.sol
      creates verifier.sol contract that can be deployed to Ethereum compatible blockchains.

powershell commands: a."<COMMAND>"
